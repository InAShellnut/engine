//! Code generated by `tools/generate` - manual edits will be overwritten

const std = @import("std");

const gen1 = @import("../../gen1/data.zig");

const assert = std.debug.assert;
const Effectiveness = gen1.Effectiveness;

const S = Effectiveness.Super;
const N = Effectiveness.Neutral;
const R = Effectiveness.Resisted;
const I = Effectiveness.Immune;

/// Representation of a Generation II type in Pokémon.
pub const Type = enum(u8) {
    Normal,
    Fighting,
    Flying,
    Poison,
    Ground,
    Rock,
    Bug,
    Ghost,
    Steel,
    @"???",
    Fire,
    Water,
    Grass,
    Electric,
    Psychic,
    Ice,
    Dragon,
    Dark,

    const CHART: [18][18]Effectiveness = .{
        [_]Effectiveness{ N, N, N, N, N, R, N, I, R, N, N, N, N, N, N, N, N, N }, // Normal
        [_]Effectiveness{ S, N, R, R, N, S, R, I, S, N, N, N, N, N, R, S, N, S }, // Fighting
        [_]Effectiveness{ N, S, N, N, N, R, S, N, R, N, N, N, S, R, N, N, N, N }, // Flying
        [_]Effectiveness{ N, N, N, R, R, R, N, R, I, N, N, N, S, N, N, N, N, N }, // Poison
        [_]Effectiveness{ N, N, I, S, N, S, R, N, S, N, S, N, R, S, N, N, N, N }, // Ground
        [_]Effectiveness{ N, R, S, N, R, N, S, N, R, N, S, N, N, N, N, S, N, N }, // Rock
        [_]Effectiveness{ N, R, R, R, N, N, N, R, R, N, R, N, S, N, S, N, N, S }, // Bug
        [_]Effectiveness{ I, N, N, N, N, N, N, S, R, N, N, N, N, N, S, N, N, R }, // Ghost
        [_]Effectiveness{ N, N, N, N, N, S, N, N, R, N, R, R, N, R, N, S, N, N }, // Steel
        [_]Effectiveness{ N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N }, // ???
        [_]Effectiveness{ N, N, N, N, N, R, S, N, S, N, R, R, S, N, N, S, R, N }, // Fire
        [_]Effectiveness{ N, N, N, N, S, S, N, N, N, N, S, R, R, N, N, N, R, N }, // Water
        [_]Effectiveness{ N, N, R, R, S, S, R, N, R, N, R, S, R, N, N, N, R, N }, // Grass
        [_]Effectiveness{ N, N, S, N, I, N, N, N, N, N, N, S, R, R, N, N, R, N }, // Electric
        [_]Effectiveness{ N, S, N, S, N, N, N, N, R, N, N, N, N, N, R, N, N, I }, // Psychic
        [_]Effectiveness{ N, N, S, N, S, N, N, N, R, N, R, R, S, N, N, R, S, N }, // Ice
        [_]Effectiveness{ N, N, N, N, N, N, N, N, R, N, N, N, N, N, N, N, S, N }, // Dragon
        [_]Effectiveness{ N, R, N, N, N, N, N, S, R, N, N, N, N, N, S, N, N, R }, // Dark
    };

    const PRECEDENCE = [_]u8{
        1, // Normal
        7, // Fighting
        10, // Flying
        8, // Poison
        9, // Ground
        13, // Rock
        12, // Bug
        14, // Ghost
        17, // Steel
        0, // ???
        2, // Fire
        3, // Water
        5, // Grass
        4, // Electric
        11, // Psychic
        6, // Ice
        15, // Dragon
        16, // Dark
    };

    comptime {
        assert(@bitSizeOf(Type) == 8);
        assert(@sizeOf(@TypeOf(CHART)) == 324);
        assert(@sizeOf(@TypeOf(PRECEDENCE)) == 18);
    }

    /// The number of types in this generation.
    pub const size = 18;

    /// Whether or not this type is considered to be special as opposed to physical.
    pub inline fn special(self: Type) bool {
        return @intFromEnum(self) >= @intFromEnum(Type.Fire);
    }

    /// The `Effectiveness` of type `t2` vs. type `t1`.
    pub inline fn effectiveness(t1: Type, t2: Type) Effectiveness {
        return CHART[@intFromEnum(t1)][@intFromEnum(t2)];
    }

    /// The precedence order of type type.
    pub inline fn precedence(self: Type) u8 {
        return PRECEDENCE[@intFromEnum(self)];
    }
};

/// Representation of a Pokémon's typing.
pub const Types = extern struct {
    /// A Pokémon's primary type.
    type1: Type = .Normal,
    /// A Pokémon's secondary type (may be identical to its primary type).
    type2: Type = .Normal,

    comptime {
        assert(@sizeOf(Types) == 2);
    }

    /// Whether this typing is immune to type `t`.
    pub inline fn immune(self: Types, t: Type) bool {
        return t.effectiveness(self.type1) == I or t.effectiveness(self.type2) == I;
    }

    /// Whether this typing includes type `t`.
    pub inline fn includes(self: Types, t: Type) bool {
        return self.type1 == t or self.type2 == t;
    }
};
