//! Code generated by `tools/generate` - manual edits will be overwritten.

const std = @import("std");

const common = @import("../common/data.zig");

const data = @import("data.zig");
const mechanics = @import("mechanics.zig");

const assert = std.debug.assert;

const Player = common.Player;
const Result = common.Result;

const Effectiveness = data.Effectiveness;
const Move = data.Move;

const Effects = mechanics.Effects;
const State = mechanics.State;

const decrementPP = mechanics.decrementPP;
const checkHit = mechanics.checkHit;
const checkCriticalHit = mechanics.checkCriticalHit;
const calcDamage = mechanics.calcDamage;
const adjustDamage = mechanics.adjustDamage;
const randomizeDamage = mechanics.randomizeDamage;
const applyDamage = mechanics.applyDamage;
const buildRage = mechanics.buildRage;
const kingsRock = mechanics.kingsRock;
const destinyBond = mechanics.destinyBond;

pub fn doMove(battle: anytype, player: Player, state: *State, options: anytype) !?Result {
    var log = options.log;

    var side = battle.side(player);
    var volatiles = &side.active.volatiles;

    const ident = battle.active(player);
    const foe_ident = battle.active(player.foe());

    const effect = Move.get(state.move).effect;
    switch (effect) {
        .AlwaysHit, .HighCritical, .Priority, .JumpKick, .None => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .DoubleHit, .MultiHit => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO startloop
            try checkHit(battle, player, state, options);
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // TODO cleartext
            // TODO supereffectivelooptext
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            // TODO endloop
            try kingsRock(battle, player, state, options);
        },
        .PayDay => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.payDay(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .BurnChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.burnChance(battle, player, state, options);
        },
        .FreezeChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.freezeChance(battle, player, state, options);
        },
        .ParalyzeChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.paralyzeChance(battle, player, state, options);
        },
        .OHKO => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try adjustDamage(battle, player, state, options);
            try Effects.ohko(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
        },
        .RazorWind => {
            // TODO checkcharge
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO charge
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Gust => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO doubleflyingdamage
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
        },
        .ForceSwitch => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.forceSwitch(battle, player, state, options);
        },
        .FlyDig => {
            // TODO checkcharge
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO charge
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Binding => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.binding(battle, player, state, options);
        },
        .Stomp => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO doubleminimizedamage
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.flinchChance(battle, player, state, options);
        },
        .FlinchChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.flinchChance(battle, player, state, options);
        },
        .Recoil => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.recoil(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Thrashing => {
            // TODO checkrampage
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO rampage
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkHit(battle, player, state, options);
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .PoisonChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.poisonChance(battle, player, state, options);
        },
        .Twineedle => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO startloop
            try checkHit(battle, player, state, options);
            // TODO effectchance
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // TODO cleartext
            // TODO supereffectivelooptext
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            // TODO endloop
            try kingsRock(battle, player, state, options);
            try Effects.poisonChance(battle, player, state, options);
        },
        .Sleep => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            // TODO checksafeguard
            try Effects.sleep(battle, player, state, options);
        },
        .Confusion => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            // TODO checksafeguard
            try Effects.confusion(battle, player, state, options);
        },
        .SuperFang, .LevelDamage, .Psywave, .FixedDamage => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.fixedDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO resettypematchup
            // TODO failuretext
            try applyDamage(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Disable => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.disable(battle, player, state, options);
        },
        .Mist => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.mist(battle, player, state, options);
        },
        .ConfusionChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.confusionChance(battle, player, state, options);
        },
        .HyperBeam => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.hyperBeam(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
        },
        .Counter => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.counter(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .DreamEater, .DrainHP => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.drainHP(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            if (state.move != .DreamEater) try kingsRock(battle, player, state, options);
        },
        .LeechSeed => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.leechSeed(battle, player, state, options);
        },
        .Solarbeam => {
            // TODO checkcharge
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.solarBeam(battle, player, state, options);
            // TODO charge
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Toxic, .Poison => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try adjustDamage(battle, player, state, options);
            // TODO checksafeguard
            try Effects.poison(battle, player, state, options);
        },
        .Paralyze => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try adjustDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO checksafeguard
            try Effects.paralyze(battle, player, state, options);
        },
        .Thunder => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            // TODO thunderaccuracy
            try checkHit(battle, player, state, options);
            // TODO effectchance
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.paralyzeChance(battle, player, state, options);
        },
        .Earthquake => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO doubleundergrounddamage
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
        },
        .Rage => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // ragedamage
            assert(volatiles.Rage);
            state.damage *|= (volatiles.rage +| 1);

            try randomizeDamage(battle, player, state, options);
            // TODO failuretext
            try Effects.rage(battle, player, state, options);
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Teleport => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.teleport(battle, player, state, options);
        },
        .Mimic => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.mimic(battle, player, state, options);
        },
        .Heal => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.heal(battle, player, state, options);
        },
        .Haze => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.haze(battle, player, state, options);
        },
        .LightScreen, .Reflect => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.screens(battle, player, state, options);
        },
        .FocusEnergy => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.focusEnergy(battle, player, state, options);
        },
        .Bide => {
            // TODO storeenergy
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // TODO unleashenergy
            // TODO resettypematchup
            try checkHit(battle, player, state, options);
            // TODO bidefailtext
            try applyDamage(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Metronome => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.metronome(battle, player, state, options);
        },
        .MirrorMove => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.mirrorMove(battle, player, state, options);
        },
        .Explode => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            try Effects.explode(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .SkullBash => {
            // TODO checkcharge
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO charge
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
            // TODO endturn
            try Effects.boost(battle, player, state, options);
        },
        .SkyAttack => {
            // TODO checkcharge
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO charge
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.flinchChance(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Transform => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.transform(battle, player, state, options);
        },
        .Splash => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.splash(battle, player, state, options);
        },
        .Conversion => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.conversion(battle, player, state, options);
        },
        .TriAttack => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.triAttack(battle, player, state, options);
        },
        .Substitute => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.substitute(battle, player, state, options);
        },
        .Sketch => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.sketch(battle, player, state, options);
        },
        .TripleKick => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO startloop
            try checkHit(battle, player, state, options);
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try Effects.tripleKick(battle, player, state, options);
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // TODO cleartext
            // TODO supereffectivelooptext
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            // TODO kickcounter
            // TODO endloop
            try kingsRock(battle, player, state, options);
        },
        .Thief => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.thief(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .MeanLook => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.meanLook(battle, player, state, options);
        },
        .LockOn => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.lockOn(battle, player, state, options);
        },
        .Nightmare => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.nightmare(battle, player, state, options);
        },
        .Snore => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            try Effects.snore(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.flinchChance(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Curse => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.curse(battle, player, state, options);
        },
        .Reversal => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.fixedDamage(battle, player, state, options);
            try adjustDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Conversion2 => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.conversion2(battle, player, state, options);
        },
        .Spite => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.spite(battle, player, state, options);
        },
        .Endure, .Protect => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.protect(battle, player, state, options);
        },
        .BellyDrum => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.bellyDrum(battle, player, state, options);
        },
        .Spikes => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.spikes(battle, player, state, options);
        },
        .Foresight => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.foresight(battle, player, state, options);
        },
        .DestinyBond => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.destinyBond(battle, player, state, options);
        },
        .PerishSong => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.perishSong(battle, player, state, options);
        },
        .Sandstorm => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.sandstorm(battle, player, state, options);
        },
        .Rollout => {
            // TODO checkcurl
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO rolloutpower
            try randomizeDamage(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .FalseSwipe => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try Effects.falseSwipe(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Swagger => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            // TODO switchturn
            // TODO attackup2
            // TODO switchturn
            // TODO failuretext
            // TODO switchturn
            // TODO switchturn
            try Effects.confusionChance(battle, player, state, options);
        },
        .FuryCutter => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            try Effects.furyCutter(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Attract => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.attract(battle, player, state, options);
        },
        .SleepTalk => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.sleepTalk(battle, player, state, options);
        },
        .HealBell => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.healBell(battle, player, state, options);
        },
        .Frustration, .Return => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            try Effects.happiness(battle, player, state, options);
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Present => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            try Effects.present(battle, player, state, options);
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Safeguard => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.safeguard(battle, player, state, options);
        },
        .PainSplit => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.painSplit(battle, player, state, options);
        },
        .FlameWheel, .SacredFire => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.defrost(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.burnChance(battle, player, state, options);
        },
        .Magnitude => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO getmagnitude
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO doubleundergrounddamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .BatonPass => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.batonPass(battle, player, state, options);
        },
        .Encore => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.encore(battle, player, state, options);
        },
        .Pursuit => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try Effects.pursuit(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .RapidSpin => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            try Effects.rapidSpin(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .MorningSun, .Synthesis, .Moonlight => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.weatherHeal(battle, player, state, options);
        },
        .HiddenPower => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            try Effects.hiddenPower(battle, player, state, options);
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .Twister => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            // TODO doubleflyingdamage
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.flinchChance(battle, player, state, options);
        },
        .RainDance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.rainDance(battle, player, state, options);
        },
        .SunnyDay => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.sunnyDay(battle, player, state, options);
        },
        .MirrorCoat => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.mirrorCoat(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try kingsRock(battle, player, state, options);
        },
        .PsychUp => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.psychUp(battle, player, state, options);
        },
        .AllStatUpChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.allStatUpChance(battle, player, state, options);
        },
        .FutureSight => {
            // TODO checkfuturesight
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO damagestats
            // TODO damagecalc
            try Effects.futureSight(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO failuretext
            try applyDamage(battle, player, state, options);
            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
        },
        .BeatUp => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            // TODO startloop
            try checkHit(battle, player, state, options);
            try checkCriticalHit(battle, player, state, options);
            try Effects.beatUp(battle, player, state, options);
            // TODO damagecalc
            try randomizeDamage(battle, player, state, options);
            // TODO clearmissdamage
            // TODO failuretext
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // TODO cleartext
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            // TODO endloop
            // TODO beatupfailtext
            try kingsRock(battle, player, state, options);
        },
        // zig fmt: off
        .AttackUp1, .AttackUp2, .DefenseCurl, .DefenseUp1, .DefenseUp2,
        .EvasionUp1, .SpAtkUp1, .SpDefUp2, .SpeedUp2 => {
        // zig fmt: on
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try Effects.boost(battle, player, state, options);
            if (effect == .DefenseCurl) try Effects.defenseCurl(battle, player, state, options);
        },
        .AttackUpChance, .DefenseUpChance => {
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretxt
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            try Effects.boost(battle, player, state, options);
        },
        // zig fmt: off
        .AccuracyDown1, .AttackDown1, .AttackDown2, .DefenseDown1,
        .DefenseDown2, .EvasionDown1, .SpeedDown1, .SpeedDown2 => {
        // zig fmt: on
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkHit(battle, player, state, options);
            try Effects.unboost(battle, player, state, options);
        },
        // zig fmt: off
        .AccuracyDownChance, .AttackDownChance, .DefenseDownChance,
        .SpDefDownChance, .SpeedDownChance => {
        // zig fmt: on
            // usedmovetext
            try log.move(ident, state.move, foe_ident); // FIXME self? from?
            // doturn
            const charging = false; // TODO
            const skip_pp = charging or state.move == .Struggle or
                (volatiles.BeatUp or volatiles.Thrashing or volatiles.Bide);
            if (!skip_pp) _ = decrementPP(side, state.move, state.mslot); // TODO if no pp return

            try checkCriticalHit(battle, player, state, options);
            // TODO damagestats
            // TODO damagecalc
            try adjustDamage(battle, player, state, options);
            try randomizeDamage(battle, player, state, options);
            try checkHit(battle, player, state, options);
            // TODO effectchance
            // TODO failuretxt
            try applyDamage(battle, player, state, options);

            // criticaltext
            if (state.crit) try log.crit(foe_ident);
            // supereffectivetext
            if (!state.immune()) {
                if (state.effectiveness > Effectiveness.neutral) {
                    try log.supereffective(foe_ident);
                } else if (state.effectiveness < Effectiveness.neutral) {
                    try log.resisted(foe_ident);
                }
            }

            _ = try destinyBond(battle, player, state, options);
            try buildRage(battle, player, state, options);
            // TODO if (effect == .DefenseDownChance) effectchance
            try Effects.unboost(battle, player, state, options);
        },
    }

    return null;
}
